{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao SIAA GenAI Template","text":"<p>Este \u00e9 um template Cookiecutter projetado para acelerar a cria\u00e7\u00e3o de projetos robustos e prontos para produ\u00e7\u00e3o de APIs baseadas em Modelos de Linguagem (LLMs).</p> <p>Ele foi constru\u00eddo com as melhores pr\u00e1ticas de MLOps em mente, oferecendo uma estrutura flex\u00edvel que se adapta \u00e0s suas necessidades, seja para um simples endpoint de infer\u00eancia, uma aplica\u00e7\u00e3o RAG complexa ou um sistema multi-agente.</p> <p>Por que usar este template?</p> <ul> <li>Rapidez: Gere um projeto completo em minutos, com toda a estrutura e configura\u00e7\u00e3o prontas.</li> <li>Padr\u00e3o: Garanta que todos os projetos da sua equipe sigam a mesma arquitetura, facilitando a colabora\u00e7\u00e3o e a manuten\u00e7\u00e3o.</li> <li>Flexibilidade: Ative funcionalidades avan\u00e7adas como RAG, Agentes e Hydra apenas quando precisar, mantendo o projeto limpo.</li> <li>Pronto para Produ\u00e7\u00e3o: Inclui Docker, CI/CD, e uma estrutura escal\u00e1vel desde o in\u00edcio.</li> </ul>"},{"location":"explanation/","title":"Explica\u00e7\u00e3o e Decis\u00f5es de Design","text":"<p>Nesta se\u00e7\u00e3o, explicamos o \"porqu\u00ea\" por tr\u00e1s de algumas das escolhas tecnol\u00f3gicas e de design deste template.</p>"},{"location":"explanation/#por-que-uv-em-vez-de-poetry-ou-pip","title":"Por que <code>uv</code> em vez de <code>poetry</code> ou <code>pip</code>?","text":"<ul> <li>Velocidade: <code>uv</code> \u00e9 uma ferramenta da nova gera\u00e7\u00e3o, escrita em Rust, com velocidades maiores que usando <code>pip</code> ou <code>poetry</code> para resolver e instalar depend\u00eancias. Em projetos de IA com muitas bibliotecas pesadas, isso faz uma grande diferen\u00e7a.</li> <li>Simplicidade: Ele adota o formato padr\u00e3o <code>requirements.txt</code>, que \u00e9 universalmente entendido, ao mesmo tempo que oferece um resolvedor de depend\u00eancias moderno e cache global.</li> </ul>"},{"location":"explanation/#por-que-fastapi","title":"Por que FastAPI?","text":"<ul> <li>Performance: \u00c9 um dos frameworks web Python mais r\u00e1pidos dispon\u00edveis, ideal para servir modelos que precisam de baixa lat\u00eancia.</li> <li>Tipagem Moderna: Usa type hints do Python para valida\u00e7\u00e3o de dados com Pydantic, o que torna as APIs mais robustas e menos propensas a erros.</li> <li>Auto-documenta\u00e7\u00e3o: Gera automaticamente uma documenta\u00e7\u00e3o interativa da API (com Swagger UI), o que \u00e9 extremamente \u00fatil para os consumidores da sua API.</li> </ul>"},{"location":"explanation/#por-que-uma-estrutura-de-pastas-detalhada","title":"Por que uma Estrutura de Pastas Detalhada?","text":"<p>A estrutura com <code>data/</code>, <code>src/</code>, <code>notebooks/</code>, etc., \u00e9 baseada em padr\u00f5es bem estabelecidos na comunidade de Ci\u00eancia de Dados (como o Cookiecutter Data Science). Ela promove:</p> <ul> <li>Reprodutibilidade: Separar dados, c\u00f3digo e notebooks torna mais f\u00e1cil para outros (e para voc\u00ea no futuro) entenderem e reproduzirem seu trabalho.</li> <li>Manutenibilidade: C\u00f3digo modular em <code>src/</code> \u00e9 mais f\u00e1cil de testar e manter do que scripts soltos.</li> </ul>"},{"location":"getting-started/","title":"Guia de In\u00edcio R\u00e1pido","text":"<p>Siga estes passos para gerar seu primeiro projeto com o SIAA GenAI Template.</p>"},{"location":"getting-started/#1-pre-requisitos","title":"1. Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, garanta que voc\u00ea tenha o <code>cookiecutter</code> instalado globalmente em seu sistema:</p> <pre><code>pip install cookiecutter\n</code></pre>"},{"location":"getting-started/#2-gerando-o-projeto","title":"2. Gerando o Projeto","text":"<p>Execute o seguinte comando no seu terminal. Ele clonar\u00e1 o template e iniciar\u00e1 o processo de configura\u00e7\u00e3o interativo.</p> <pre><code>cookiecutter gh:EricCamacho-IPT/siaa-genai-template\n</code></pre> <p>Voc\u00ea ser\u00e1 guiado por uma s\u00e9rie de perguntas para configurar seu projeto, como nome, autor e quais funcionalidades deseja incluir.</p>"},{"location":"getting-started/#3-configuracao-inicial-automatizada","title":"3. Configura\u00e7\u00e3o Inicial Automatizada","text":"<p>Ap\u00f3s a gera\u00e7\u00e3o dos arquivos, o template ir\u00e1 perguntar se voc\u00ea deseja que ele configure o ambiente virtual e instale as depend\u00eancias automaticamente.</p> <p><code>Deseja configurar o ambiente e instalar as depend\u00eancias agora? [y/n]: y</code></p> <p>Se voc\u00ea responder <code>sim</code> (o padr\u00e3o), o template ir\u00e1:</p> <ol> <li>Criar um ambiente virtual (<code>.venv</code>).</li> <li>Instalar <code>uv</code> dentro deste ambiente.</li> <li>Instalar todas as depend\u00eancias listadas em <code>requirements-dev.txt</code></li> </ol>"},{"location":"getting-started/#4-ativando-o-ambiente","title":"4. Ativando o Ambiente","text":"<p>Entre na pasta do seu novo projeto e ative o ambiente virtual rec\u00e9m-criado:</p> <p><code>cd &lt;nome_do_seu_projeto&gt;</code></p> <p>No Linux/macOS</p> <pre><code>source .venv/bin/activate`\n</code></pre> <p>No Windows</p> <pre><code>.venv\\Scripts\\activate\n</code></pre>"},{"location":"features/agents/","title":"Agentes","text":"<p>Ao escolher um <code>llm_framework</code> (<code>crewai</code>, <code>langgraph</code> ou <code>pydanticai</code>), o template cria uma estrutura de pastas em <code>agents</code> para orquestrar sistemas multi-agente.</p> <ul> <li> <p><code>crew.py</code>: Onde voc\u00ea define seus agentes. Cada agente ter\u00e1 um papel (role), um objetivo (goal) e ferramentas (tools) espec\u00edficas.</p> </li> <li> <p><code>tasks.py</code>: Aqui voc\u00ea define as tarefas que ser\u00e3o atribu\u00eddas aos agentes. Cada tarefa \u00e9 uma unidade de trabalho que contribui para o objetivo final da equipe.</p> </li> </ul> <p>Esta separa\u00e7\u00e3o ajuda a gerenciar a complexidade de m\u00faltiplos agentes trabalhando juntos.</p>"},{"location":"features/conditional-generation/","title":"Gera\u00e7\u00e3o Condicional de C\u00f3digo","text":"<p>A principal vantagem deste template \u00e9 sua capacidade de gerar uma estrutura de projeto enxuta, contendo apenas o que voc\u00ea precisa. Isso \u00e9 feito atrav\u00e9s da gera\u00e7\u00e3o condicional de arquivos e pastas.</p> <p>Durante a configura\u00e7\u00e3o, voc\u00ea responder\u00e1 a perguntas como <code>use_rag</code> e <code>llm_framework</code>. Com base nas suas respostas, o Cookiecutter ir\u00e1:</p> <ul> <li>Criar a pasta <code>src/package_name/rag/</code> apenas se <code>use_rag</code> for 'y'.</li> <li>Criar a pasta <code>src/package_name/agents/</code> apenas se um <code>llm_framework</code> for selecionado (<code>crewai</code>, <code>langgraph</code>, <code>pydanticai</code>).</li> <li>Adicionar o arquivo <code>mkdocs.yml</code> e a pasta <code>docs/</code> apenas se <code>use_mkdocs</code> for 'y'.</li> <li>Criar a pasta <code>config/</code> apenas se <code>use_hydra</code> for 'y'.</li> </ul> <p>Isso mant\u00e9m o projeto gerado limpo, sem c\u00f3digos ou configura\u00e7\u00f5es desnecess\u00e1rias.</p>"},{"location":"features/core-structure/","title":"Estrutura Principal do Projeto","text":"<p>Todo projeto gerado com este template compartilha uma estrutura de pastas principal, projetada para organiza\u00e7\u00e3o e escalabilidade.</p> <ul> <li> <p><code>config/</code>: (Opcional, se <code>use_hydra='y'</code>) Cont\u00e9m os arquivos de configura\u00e7\u00e3o <code>.yaml</code> gerenciados pelo Hydra. Permite separar a l\u00f3gica das configura\u00e7\u00f5es de par\u00e2metros.</p> </li> <li> <p><code>data/</code>: Destinada a todos os dados do projeto. \u00c9 subdividida para refletir o ciclo de vida dos dados:</p> <ul> <li><code>external/</code>: Dados de fontes de terceiros.</li> <li><code>features/</code>: Dados sobre as vari\u00e1veis/metadados.</li> <li><code>raw/</code>: Dados originais e imut\u00e1veis.</li> <li><code>intermediate/</code>: Dados intermedi\u00e1rios, ap\u00f3s alguma limpeza ou transforma\u00e7\u00e3o.</li> <li><code>processed/</code>: Dados finais, limpos e prontos para serem usados por modelos.</li> </ul> </li> <li> <p><code>docs/</code>: (Opcional, se <code>use_mkdocs='y'</code>) Cont\u00e9m os arquivos para a documenta\u00e7\u00e3o do projeto espec\u00edfico (n\u00e3o do template).</p> </li> <li> <p><code>notebooks/</code>: Jupyter Notebooks para an\u00e1lise explorat\u00f3ria de dados, prototipagem e experimenta\u00e7\u00e3o.</p> </li> <li> <p><code>src/nome_do_seu_pacote</code>: O cora\u00e7\u00e3o da sua aplica\u00e7\u00e3o. Todo o c\u00f3digo-fonte Python fica aqui.</p> </li> <li> <p><code>tests/</code>: Testes automatizados (unit\u00e1rios, de integra\u00e7\u00e3o, etc.).</p> </li> </ul>"},{"location":"features/hydra/","title":"Configura\u00e7\u00e3o com Hydra","text":"<p>Se <code>use_hydra: 'y'</code> for selecionado, seu projeto vir\u00e1 configurado para usar o Hydra, uma poderosa biblioteca para gerenciamento de configura\u00e7\u00f5es.</p> <p>Uma pasta <code>config/</code> ser\u00e1 criada na raiz do projeto, contendo <code>config.yaml</code>.</p> <p>Vantagens:</p> <ul> <li>Separa\u00e7\u00e3o: Mant\u00e9m suas configura\u00e7\u00f5es (par\u00e2metros de modelo, caminhos de arquivo, etc.) fora do seu c\u00f3digo Python.</li> <li>Flexibilidade na Linha de Comando: Voc\u00ea pode facilmente sobrescrever qualquer configura\u00e7\u00e3o via linha de comando. Ex: <code>python seu_script.py model.temperature=0.9</code>.</li> <li>Composi\u00e7\u00e3o: Permite criar configura\u00e7\u00f5es complexas combinando m\u00faltiplos arquivos <code>.yaml</code>.</li> </ul> <p>O Hydra \u00e9 ideal para experimenta\u00e7\u00e3o, permitindo que voc\u00ea teste diferentes hiperpar\u00e2metros sem alterar o c\u00f3digo.</p>"},{"location":"features/rag/","title":"RAG (Retrieval-Augmented Generation)","text":"<p>Se voc\u00ea escolher <code>use_rag: 'y'</code>, o template ir\u00e1 gerar uma estrutura dedicada para construir sistemas RAG. A pasta <code>rag</code> ser\u00e1 criada com os seguintes m\u00f3dulos:</p> <ul> <li> <p><code>embeddings.py</code>: Respons\u00e1vel por carregar o modelo de embedding e transformar textos em vetores. \u00c9 aqui que voc\u00ea define qual modelo usar (ex: da HuggingFace, OpenAI, etc.).</p> </li> <li> <p><code>vector_store.py</code>: Gerencia a cria\u00e7\u00e3o e o acesso ao banco de dados vetorial (ex: FAISS, ChromaDB). Ele usa os embeddings para indexar e armazenar seus documentos.</p> </li> <li> <p><code>retriever.py</code>: Cont\u00e9m a l\u00f3gica para realizar a busca de similaridade. Dado um prompt do usu\u00e1rio, ele consulta o <code>vector_store</code> para encontrar os trechos de documentos mais relevantes.</p> </li> </ul> <p>Essa estrutura modular permite que voc\u00ea construa e mantenha sistemas RAG complexos de forma organizada.</p>"}]}